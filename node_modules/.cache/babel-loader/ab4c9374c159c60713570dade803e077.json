{"ast":null,"code":"var _jsxFileName = \"/Users/yanguangjing/Downloads/snu-infovis-assn-2-skeleton-master/src/components/Mainplot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mainplot = props => {\n  _s();\n\n  const {\n    width,\n    height,\n    margin,\n    pointSize,\n    maxPointSize,\n    data,\n    movieData\n  } = props;\n  const {\n    xPosition,\n    yPosition,\n    color,\n    opacity,\n    size\n  } = data;\n  const svgWidth = margin * 2 + width;\n  const svgHeight = margin * 2 + height;\n  const splotSvg = useRef(null);\n  let circleSvg;\n  const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n  const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n  const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])));\n  const xScale = d3.scaleLinear().domain(xExtent).range([0, width]);\n  const yScale = d3.scaleLinear().domain(yExtent).range([height, 0]);\n  const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n  const xAxis = d3.axisBottom(xScale);\n  const yAxis = d3.axisLeft(yScale);\n  const svg = d3.select(splotSvg.current);\n  d3.select(splotSvg.current).append(\"g\").attr(\"transform\", `translate(${margin},${height + margin})`).call(xAxis);\n  d3.select(splotSvg.current).append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`).call(yAxis);\n  circleSvg = svg.append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`); //console.log(\"x\"+movieData.map(d=> xScale(parseFloat(d[xPosition]))));\n\n  console.log(\"rextent\" + movieData.map(d => rScale(parseFloat(d[size]))));\n  circleSvg.selectAll(\"circle\").data(movieData).enter().append(\"circle\").attr(\"cx\", d => xScale(parseFloat(d[xPosition]))).attr(\"cy\", d => yScale(parseFloat(d[yPosition]))).attr(\"class\", (_, i) => \"circle\" + i).attr(\"r\", pointSize).attr(\"fill\", \"red\");\n  let brush = d3.brush().extent([[0, 0], [width, height]]).on(\"start brush end\", brushed);\n  const brushSvg = svg.append(\"g\").attr(\"transform\", \"translate(\" + props.margin + \",\" + props.margin + \")\");\n  brushSvg.call(brush);\n\n  function brushed({\n    selection\n  }) {\n    if (selection === null) {\n      return;\n    }\n\n    let [[x0, y0], [x1, y1]] = selection;\n    console.log(x0, y0);\n    console.log(x1, y1);\n    const insideBrush = movieData.map((d, i) => {\n      const xCoor = xScale(parseFloat(d[xPosition]));\n      const yCoor = yScale(parseFloat(d[yPosition]));\n      if (xCoor >= x0 && xCoor <= x1 && yCoor >= y0 && yCoor <= y1) return true;else return false;\n    });\n    const insideBrushIdx = insideBrush.reduce((acc, cur, i) => {\n      if (cur) acc.push(i);\n      return acc;\n    }, []);\n    d3.selectAll(\"circle\").attr(\"stroke\", \"none\");\n    insideBrushIdx.forEach(idx => {\n      d3.selectAll(\".circle\" + idx).attr(\"stroke\", \"black\");\n    });\n  }\n\n  useEffect(() => {\n    updateSplot();\n  }, [data]);\n\n  const updateSplot = () => {\n    circleSvg.selectAll(\"circle\").data(movieData).join.transition().duration(100).attr(\"cx\", d => xScale(parseFloat(d[xPosition]))).attr(\"cy\", d => yScale(parseFloat(d[yPosition]))).attr(\"r\", d => rScale(parseFloat(d[size]))).attr(\"fill\", \"black\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: splotSvg,\n      width: svgWidth,\n      height: svgHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Mainplot, \"BxZyyuR43c64h1fasfQJTgubz08=\");\n\n_c = Mainplot;\nexport default Mainplot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mainplot\");","map":{"version":3,"sources":["/Users/yanguangjing/Downloads/snu-infovis-assn-2-skeleton-master/src/components/Mainplot.js"],"names":["React","useRef","useEffect","d3","Mainplot","props","width","height","margin","pointSize","maxPointSize","data","movieData","xPosition","yPosition","color","opacity","size","svgWidth","svgHeight","splotSvg","circleSvg","xExtent","extent","map","d","parseFloat","yExtent","rExtent","xScale","scaleLinear","domain","range","yScale","rScale","xAxis","axisBottom","yAxis","axisLeft","svg","select","current","append","attr","call","console","log","selectAll","enter","_","i","brush","on","brushed","brushSvg","selection","x0","y0","x1","y1","insideBrush","xCoor","yCoor","insideBrushIdx","reduce","acc","cur","push","forEach","idx","updateSplot","join","transition","duration"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect} from \"react\";\nimport * as d3 from \"d3\";\n\nconst Mainplot = (props) => {\n  const { width, height, margin, pointSize, maxPointSize, data, movieData } = props;\n  const { xPosition, yPosition, color, opacity, size} = data;\n\n  const svgWidth = margin * 2 + width;\n  const svgHeight = margin * 2 + height;\n  const splotSvg = useRef(null);\n  let circleSvg;\n\n  const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n  const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n  const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])))\n\n  const xScale  = d3.scaleLinear().domain(xExtent).range([0, width]);\n  const yScale  = d3.scaleLinear().domain(yExtent).range([height, 0]);\n  const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n\n  const xAxis = d3.axisBottom(xScale)\n  const yAxis = d3.axisLeft(yScale)\n\n  const svg = d3.select(splotSvg.current);\n\n  d3.select(splotSvg.current)\n     .append(\"g\")\n    .attr(\"transform\", `translate(${ margin },${ height + margin })`)\n    .call(xAxis)\n\n  d3.select(splotSvg.current)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${ margin }, ${ margin })`)\n    .call(yAxis)\n\n  circleSvg = svg.append(\"g\").attr(\"transform\", `translate(${ margin }, ${ margin })`) \n\n  //console.log(\"x\"+movieData.map(d=> xScale(parseFloat(d[xPosition]))));\n  console.log(\"rextent\"+movieData.map(d=> rScale(parseFloat(d[size]))));\n\n  circleSvg.selectAll(\"circle\")\n           .data(movieData)\n           .enter()\n           .append(\"circle\")\n           .attr(\"cx\", d => xScale(parseFloat(d[xPosition])))\n           .attr(\"cy\", d => yScale(parseFloat(d[yPosition])))\n           .attr(\"class\", (_, i) => \"circle\" + i)\n           .attr(\"r\", pointSize)\n           .attr(\"fill\", \"red\")\n\n\n  let brush = d3.brush()\n                .extent([[0, 0], [width, height]])\n                .on(\"start brush end\", brushed)\n  \n  const brushSvg = svg.append(\"g\")\n                      .attr(\"transform\", \"translate(\" + props.margin + \",\" + props.margin + \")\")\n                      \n  brushSvg.call(brush);\n\n  function brushed({selection}) {\n\n    if (selection === null) {\n      return;\n    }\n\n    let [[x0, y0], [x1, y1]] = selection;\n    console.log(x0, y0);\n    console.log(x1, y1);\n\n    const insideBrush = movieData.map((d, i) => {\n      const xCoor = xScale(parseFloat(d[xPosition]));\n      const yCoor = yScale(parseFloat(d[yPosition]));\n      if (xCoor >= x0 && xCoor <= x1 &&\n          yCoor >= y0 && yCoor <= y1\n      ) return true;\n      else return false;\n    })\n\n    const insideBrushIdx = insideBrush.reduce((acc, cur, i) => {\n      if (cur) acc.push(i);\n      return acc;\n    }, []);\n    d3.selectAll(\"circle\").attr(\"stroke\", \"none\");\n    insideBrushIdx.forEach(idx => {\n      d3.selectAll(\".circle\" + idx)\n        .attr(\"stroke\", \"black\")\n    });\t\t\n   }\n\n  useEffect(() => {\n    updateSplot();\n\t}, [data]);\n\n    const updateSplot = () =>{\n\n      circleSvg.selectAll(\"circle\")\n      .data(movieData)\n      .join\n      .transition()\n      .duration(100)\n      .attr(\"cx\", d => xScale(parseFloat(d[xPosition])))\n      .attr(\"cy\", d => yScale(parseFloat(d[yPosition])))\n      .attr(\"r\", d => rScale(parseFloat(d[size])))\n      .attr(\"fill\", \"black\")\n  }\n\n  return (\n\t\t<div>\n\t\t\t<svg ref={splotSvg} width={svgWidth} height={svgHeight}> \n\t\t\t</svg>\n    </div>\n  )\n\n}\nexport default Mainplot;"]},"metadata":{},"sourceType":"module"}