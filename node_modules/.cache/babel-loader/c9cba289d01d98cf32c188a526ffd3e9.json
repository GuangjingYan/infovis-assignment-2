{"ast":null,"code":"var _jsxFileName = \"/Users/yanguangjing/Downloads/snu-infovis-assn-2-skeleton-master/src/components/Mainplot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mainplot = props => {\n  _s();\n\n  const {\n    width,\n    height,\n    margin,\n    pointSize,\n    maxPointSize,\n    data,\n    movieData\n  } = props;\n  const {\n    xPosition,\n    yPosition,\n    color,\n    opacity,\n    size\n  } = data;\n  const svgWidth = margin * 2 + width;\n  const svgHeight = margin * 2 + height;\n  const splotSvg = useRef(null);\n  useEffect(() => {\n    const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n    const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n    const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])));\n    const xScale = d3.scaleLinear().domain(xExtent).range([0, width]);\n    const yScale = d3.scaleLinear().domain(yExtent).range([height, 0]);\n    const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    const svg = d3.select(splotSvg.current);\n    d3.select(splotSvg.current).append(\"g\").attr(\"transform\", `translate(${margin},${height + margin})`).call(xAxis);\n    d3.select(splotSvg.current).append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`).call(yAxis);\n    const circleSvg = svg.append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`);\n    console.log(\"x\" + movieData.map(d => xScale(parseFloat(d[xPosition]))));\n    circleSvg.selectAll(\"circle\").data(movieData).enter().append(\"circle\").attr(\"cx\", d => xScale(parseFloat(d[xPosition]))).attr(\"cy\", d => yScale(parseFloat(d[yPosition]))).attr(\"class\", (_, i) => \"circle\" + i).attr(\"r\", d => rScale(parseFloat(d[size]))).attr(\"fill\", \"black\"); // let brush = d3.brush()\n    //               .extent([[0, 0], [props.size, props.size]])\n    //               .on(\"start brush end\", brushed)\n    // const brushSvg = svg.append(\"g\")\n    //                     .attr(\"transform\", \"translate(\" + props.margin + \",\" + props.margin + \")\")\n    // brushSvg.call(brush);\n    // function brushed({selection}) {\n    //   if (selection === null) {\n    //     d3.selectAll(\"circle\").attr(\"fill\", \"black\");\n    //     updateBarChart(mean, stdev);\n    //     return;\n    //   }\n    //   let [[x0, y0], [x1, y1]] = selection;\n    //   console.log(x0, y0);\n    //   console.log(x1, y1);\n    //   const insideBrush = props.data.map((d, i) => {\n    //     const xCoor = xScale(parseFloat(d[0]));\n    //     const yCoor = yScale(parseFloat(d[1]));\n    //     if (xCoor >= x0 && xCoor <= x1 &&\n    //         yCoor >= y0 && yCoor <= y1\n    //     ) return true;\n    //     else return false;\n    //   })\n    //   const insideBrushIdx = insideBrush.reduce((acc, cur, i) => {\n    //     if (cur) acc.push(i);\n    //     return acc;\n    //   }, []);\n    //   d3.selectAll(\"circle\").attr(\"fill\", \"black\")\n    //   insideBrushIdx.forEach(idx => {\n    //     d3.selectAll(\".circle\" + idx)\n    //       .attr(\"fill\", \"red\")\n    //   });\t\t\n    //   if (insideBrushIdx.length === 0 || insideBrushIdx.length === 1){\n    //         updateBarChart(mean, stdev);\n    //       }\n    //       else {\n    //         const newMean = [\n    //           d3.mean(insideBrushIdx.map(idx => props.data[idx][0])),\n    //           d3.mean(insideBrushIdx.map(idx => props.data[idx][1])),\n    //         ];\n    //         const newStdev = [\n    //           d3.deviation(insideBrushIdx.map(idx => props.data[idx][0])),\n    //           d3.deviation(insideBrushIdx.map(idx => props.data[idx][1])),\n    //         ];\n    //         updateBarChart(newMean, newStdev)\n    //       }\n    // }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: splotSvg,\n      width: svgWidth,\n      height: svgHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Mainplot, \"BxZyyuR43c64h1fasfQJTgubz08=\");\n\n_c = Mainplot;\nexport default Mainplot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mainplot\");","map":{"version":3,"sources":["/Users/yanguangjing/Downloads/snu-infovis-assn-2-skeleton-master/src/components/Mainplot.js"],"names":["React","useRef","useEffect","d3","Mainplot","props","width","height","margin","pointSize","maxPointSize","data","movieData","xPosition","yPosition","color","opacity","size","svgWidth","svgHeight","splotSvg","xExtent","extent","map","d","parseFloat","yExtent","rExtent","xScale","scaleLinear","domain","range","yScale","rScale","xAxis","axisBottom","yAxis","axisLeft","svg","select","current","append","attr","call","circleSvg","console","log","selectAll","enter","_","i"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect} from \"react\";\nimport * as d3 from \"d3\";\n\nconst Mainplot = (props) => {\n  const { width, height, margin, pointSize, maxPointSize, data, movieData } = props;\n  const { xPosition, yPosition, color, opacity, size} = data;\n\n  const svgWidth = margin * 2 + width;\n  const svgHeight = margin * 2 + height;\n  const splotSvg = useRef(null);\n\n  useEffect(() => {\n\n\t\tconst xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n\t\tconst yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n    const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])))\n\n\t\tconst xScale  = d3.scaleLinear().domain(xExtent).range([0, width]);\n\t\tconst yScale  = d3.scaleLinear().domain(yExtent).range([height, 0]);\n    const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n\n\t\tconst xAxis = d3.axisBottom(xScale)\n\t\tconst yAxis = d3.axisLeft(yScale)\n\n\t\tconst svg = d3.select(splotSvg.current);\n\n\t\td3.select(splotSvg.current)\n\t\t \t.append(\"g\")\n      .attr(\"transform\", `translate(${ margin },${ height + margin })`)\n\t\t\t.call(xAxis)\n\n\t\td3.select(splotSvg.current)\n\t\t  .append(\"g\")\n\t\t  .attr(\"transform\", `translate(${ margin }, ${ margin })`)\n\t\t\t.call(yAxis)\n\n\t\tconst circleSvg = svg.append(\"g\").attr(\"transform\", `translate(${ margin }, ${ margin })`) \n\n    console.log(\"x\"+movieData.map(d=> xScale(parseFloat(d[xPosition]))));\n\n\t\tcircleSvg.selectAll(\"circle\")\n\t\t\t\t\t\t .data(movieData)\n\t\t\t\t\t\t .enter()\n\t\t\t\t\t\t .append(\"circle\")\n\t\t\t\t\t\t .attr(\"cx\", d => xScale(parseFloat(d[xPosition])))\n\t\t\t\t\t\t .attr(\"cy\", d => yScale(parseFloat(d[yPosition])))\n\t\t\t\t\t\t .attr(\"class\", (_, i) => \"circle\" + i)\n\t\t\t\t\t\t .attr(\"r\", d => rScale(parseFloat(d[size])))\n             .attr(\"fill\", \"black\")\n\n\n    // let brush = d3.brush()\n    //               .extent([[0, 0], [props.size, props.size]])\n    //               .on(\"start brush end\", brushed)\n\t\t\n    // const brushSvg = svg.append(\"g\")\n    //                     .attr(\"transform\", \"translate(\" + props.margin + \",\" + props.margin + \")\")\n                        \n    // brushSvg.call(brush);\n\n    // function brushed({selection}) {\n\n    //   if (selection === null) {\n    //     d3.selectAll(\"circle\").attr(\"fill\", \"black\");\n    //     updateBarChart(mean, stdev);\n    //     return;\n    //   }\n\n    //   let [[x0, y0], [x1, y1]] = selection;\n    //   console.log(x0, y0);\n    //   console.log(x1, y1);\n\n    //   const insideBrush = props.data.map((d, i) => {\n    //     const xCoor = xScale(parseFloat(d[0]));\n    //     const yCoor = yScale(parseFloat(d[1]));\n    //     if (xCoor >= x0 && xCoor <= x1 &&\n    //         yCoor >= y0 && yCoor <= y1\n    //     ) return true;\n    //     else return false;\n    //   })\n\n    //   const insideBrushIdx = insideBrush.reduce((acc, cur, i) => {\n    //     if (cur) acc.push(i);\n    //     return acc;\n    //   }, []);\n    //   d3.selectAll(\"circle\").attr(\"fill\", \"black\")\n    //   insideBrushIdx.forEach(idx => {\n    //     d3.selectAll(\".circle\" + idx)\n    //       .attr(\"fill\", \"red\")\n    //   });\t\t\n\n    //   if (insideBrushIdx.length === 0 || insideBrushIdx.length === 1){\n    //         updateBarChart(mean, stdev);\n    //       }\n    //       else {\n    //         const newMean = [\n    //           d3.mean(insideBrushIdx.map(idx => props.data[idx][0])),\n    //           d3.mean(insideBrushIdx.map(idx => props.data[idx][1])),\n    //         ];\n    //         const newStdev = [\n    //           d3.deviation(insideBrushIdx.map(idx => props.data[idx][0])),\n    //           d3.deviation(insideBrushIdx.map(idx => props.data[idx][1])),\n    //         ];\n    //         updateBarChart(newMean, newStdev)\n    //       }\n\n    // }\n\t}, [data]);\n\n  return (\n\t\t<div>\n\t\t\t<svg ref={splotSvg} width={svgWidth} height={svgHeight}> \n\t\t\t</svg>\n    </div>\n  )\n\n}\nexport default Mainplot;"]},"metadata":{},"sourceType":"module"}