{"ast":null,"code":"var _jsxFileName = \"/Users/yanguangjing/Downloads/snu-infovis-assn-2-skeleton-master/src/components/Mainplot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { Update } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mainplot = props => {\n  _s();\n\n  const {\n    width,\n    height,\n    margin,\n    pointSize,\n    maxPointSize,\n    data,\n    movieData\n  } = props;\n  const {\n    xPosition,\n    yPosition,\n    color,\n    opacity,\n    size\n  } = data;\n  const svgWidth = margin * 2 + width;\n  const svgHeight = margin * 2 + height;\n  const splotSvg = useRef(null);\n  const [isUpdate, setisUpdate] = useState(false);\n\n  const drawSplot = () => {\n    console.log(`draw`);\n    const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n    const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n    const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])));\n    const xScale = d3.scaleLinear().domain(xExtent).range([0, width]);\n    const yScale = d3.scaleLinear().domain(yExtent).range([height, 0]);\n    const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    const svg = d3.select(splotSvg.current);\n    const xAxisSvg = d3.select(splotSvg.current).append(\"g\").attr(\"transform\", `translate(${margin},${height + margin})`).attr(\"class\", \"xAxisSvg\");\n    xAxisSvg.call(xAxis);\n    const yAxisSvg = d3.select(splotSvg.current).append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`).attr(\"class\", \"yAxisSvg\");\n    yAxisSvg.call(yAxis);\n    const circleSvg = svg.append(\"g\").attr(\"transform\", `translate(${margin}, ${margin})`).attr(\"class\", \"circleSvg\");\n    circleSvg.selectAll(\"circle\").data(movieData).enter().append(\"circle\").attr(\"cx\", d => xScale(parseFloat(d[xPosition]))).attr(\"cy\", d => yScale(parseFloat(d[yPosition]))).attr(\"class\", (_, i) => \"circle\" + i).attr(\"r\", pointSize).attr(\"fill\", \"red\");\n    let brush = d3.brush().extent([[0, 0], [width, height]]).on(\"start brush end\", brushed);\n    const brushSvg = svg.append(\"g\").attr(\"transform\", \"translate(\" + props.margin + \",\" + props.margin + \")\");\n    brushSvg.call(brush);\n\n    function brushed({\n      selection\n    }) {\n      if (selection === null) {\n        return;\n      }\n\n      let [[x0, y0], [x1, y1]] = selection;\n      const insideBrush = movieData.map((d, i) => {\n        const xCoor = xScale(parseFloat(d[xPosition]));\n        const yCoor = yScale(parseFloat(d[yPosition]));\n        if (xCoor >= x0 && xCoor <= x1 && yCoor >= y0 && yCoor <= y1) return true;else return false;\n      });\n      const insideBrushIdx = insideBrush.reduce((acc, cur, i) => {\n        if (cur) acc.push(i);\n        return acc;\n      }, []);\n      d3.selectAll(\"circle\").attr(\"stroke\", \"none\");\n      insideBrushIdx.forEach(idx => {\n        d3.selectAll(\".circle\" + idx).attr(\"stroke\", \"black\");\n      });\n    } //  setTimeout(() => {\n    //   setisUpdate(true);\n    // }, 3000);\n\n\n    setisUpdate(true);\n  };\n\n  const updateSplot = () => {\n    console.log(`update`);\n    console.log(data); //update \n\n    const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n    const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n    const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])));\n    const xScale = d3.scaleLinear().domain(xExtent).range([0, width]);\n    const yScale = d3.scaleLinear().domain(yExtent).range([height, 0]);\n    const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n    const xAxis = d3.axisBottom(xScale);\n    const xAxisSvg = d3.select(\".xAxisSvg\");\n    xAxisSvg.call(xAxis);\n    const yAxis = d3.axisLeft(yScale);\n    const yAxisSvg = d3.select(\".yAxisSvg\");\n    yAxisSvg.call(yAxis);\n    const circleSvg = d3.select(\".circleSvg\");\n    circleSvg.selectAll(\"circle\").data(movieData).join().transition().duration(100).attr(\"cx\", d => xScale(parseFloat(d[xPosition]))).attr(\"cy\", d => yScale(parseFloat(d[yPosition]))) //.attr(\"r\", d => rScale(parseFloat(d[size])))\n    .attr(\"r\", \"1px\").attr(\"fill\", \"black\");\n  };\n\n  useEffect(() => {\n    if (isUpdate == false) drawSplot();else updateSplot();\n  }, [data]); // useEffect(() => {\n  //   updateSplot();\n  // }, [isUpdate]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: splotSvg,\n      width: svgWidth,\n      height: svgHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Mainplot, \"20Xx/35vin57C2yVABD0dbIBXoo=\");\n\n_c = Mainplot;\nexport default Mainplot;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mainplot\");","map":{"version":3,"sources":["/Users/yanguangjing/Downloads/snu-infovis-assn-2-skeleton-master/src/components/Mainplot.js"],"names":["React","useRef","useEffect","useState","d3","Update","Mainplot","props","width","height","margin","pointSize","maxPointSize","data","movieData","xPosition","yPosition","color","opacity","size","svgWidth","svgHeight","splotSvg","isUpdate","setisUpdate","drawSplot","console","log","xExtent","extent","map","d","parseFloat","yExtent","rExtent","xScale","scaleLinear","domain","range","yScale","rScale","xAxis","axisBottom","yAxis","axisLeft","svg","select","current","xAxisSvg","append","attr","call","yAxisSvg","circleSvg","selectAll","enter","_","i","brush","on","brushed","brushSvg","selection","x0","y0","x1","y1","insideBrush","xCoor","yCoor","insideBrushIdx","reduce","acc","cur","push","forEach","idx","updateSplot","join","transition","duration"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\nimport * as d3 from \"d3\";\nimport { Update } from \"@material-ui/icons\";\n\nconst Mainplot = (props) => {\n  const { width, height, margin, pointSize, maxPointSize, data, movieData } = props;\n  const { xPosition, yPosition, color, opacity, size} = data;\n\n  const svgWidth = margin * 2 + width;\n  const svgHeight = margin * 2 + height;\n  const splotSvg = useRef(null);\n  const[isUpdate, setisUpdate] = useState(false);\n\n  const drawSplot = () =>{\n    console.log(`draw`);\n    const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n    const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n    const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])));\n\n    const xScale  = d3.scaleLinear().domain(xExtent).range([0, width]);\n    const yScale  = d3.scaleLinear().domain(yExtent).range([height, 0]);\n    const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n  \n    const xAxis = d3.axisBottom(xScale)\n    const yAxis = d3.axisLeft(yScale)\n    const svg = d3.select(splotSvg.current);\n\n\t\tconst xAxisSvg = d3.select(splotSvg.current)\n\t\t \t.append(\"g\")\n      .attr(\"transform\", `translate(${ margin },${ height + margin })`)\n      .attr(\"class\", \"xAxisSvg\")\n\t\t\n    xAxisSvg.call(xAxis)\n\n\t\tconst yAxisSvg = d3.select(splotSvg.current)\n\t\t  .append(\"g\")\n\t\t  .attr(\"transform\", `translate(${ margin }, ${ margin })`)\n      .attr(\"class\", \"yAxisSvg\")\n\t\t\t\n    yAxisSvg.call(yAxis)\n\n\t\tconst circleSvg = svg.append(\"g\").attr(\"transform\", `translate(${ margin }, ${ margin })`).attr(\"class\", \"circleSvg\")\n\n\t\tcircleSvg.selectAll(\"circle\")\n\t\t\t\t\t\t .data(movieData)\n\t\t\t\t\t\t .enter()\n\t\t\t\t\t\t .append(\"circle\")\n\t\t\t\t\t\t .attr(\"cx\", d => xScale(parseFloat(d[xPosition])))\n\t\t\t\t\t\t .attr(\"cy\", d => yScale(parseFloat(d[yPosition])))\n\t\t\t\t\t\t .attr(\"class\", (_, i) => \"circle\" + i)\n\t\t\t\t\t\t .attr(\"r\", pointSize)\n             .attr(\"fill\", \"red\")\n\n\n    let brush = d3.brush()\n                  .extent([[0, 0], [width, height]])\n                  .on(\"start brush end\", brushed)\n\t\t\n    const brushSvg = svg.append(\"g\")\n                        .attr(\"transform\", \"translate(\" + props.margin + \",\" + props.margin + \")\")\n                        \n    brushSvg.call(brush);\n\n    function brushed({selection}) {\n\n      if (selection === null) {\n        return;\n      }\n\n      let [[x0, y0], [x1, y1]] = selection;\n\n      const insideBrush = movieData.map((d, i) => {\n        const xCoor = xScale(parseFloat(d[xPosition]));\n        const yCoor = yScale(parseFloat(d[yPosition]));\n        if (xCoor >= x0 && xCoor <= x1 &&\n            yCoor >= y0 && yCoor <= y1\n        ) return true;\n        else return false;\n      })\n\n      const insideBrushIdx = insideBrush.reduce((acc, cur, i) => {\n        if (cur) acc.push(i);\n        return acc;\n      }, []);\n      d3.selectAll(\"circle\").attr(\"stroke\", \"none\");\n      insideBrushIdx.forEach(idx => {\n        d3.selectAll(\".circle\" + idx)\n          .attr(\"stroke\", \"black\")\n      });\t\t\n     }\n    //  setTimeout(() => {\n    //   setisUpdate(true);\n    // }, 3000);\n    setisUpdate(true);\n  }\n\n  const updateSplot = () =>{\n    console.log(`update`);\n    console.log(data);\n    //update \n    const xExtent = d3.extent(movieData.map(d => parseFloat(d[xPosition])));\n    const yExtent = d3.extent(movieData.map(d => parseFloat(d[yPosition])));\n    const rExtent = d3.extent(movieData.map(d => parseFloat(d[size])));\n\n    const xScale  = d3.scaleLinear().domain(xExtent).range([0, width]);\n    const yScale  = d3.scaleLinear().domain(yExtent).range([height, 0]);\n    const rScale = d3.scaleLinear().domain(rExtent).range([pointSize, maxPointSize]);\n\n    const xAxis = d3.axisBottom(xScale);\n    const xAxisSvg = d3.select(\".xAxisSvg\")\n    xAxisSvg.call(xAxis);\n    const yAxis = d3.axisLeft(yScale);\n    const yAxisSvg = d3.select(\".yAxisSvg\")\n    yAxisSvg.call(yAxis);\n\n    const circleSvg = d3.select(\".circleSvg\")\n    circleSvg.selectAll(\"circle\")\n    .data(movieData)\n    .join()\n    .transition()\n    .duration(100)\n    .attr(\"cx\", d => xScale(parseFloat(d[xPosition])))\n    .attr(\"cy\", d => yScale(parseFloat(d[yPosition])))\n    //.attr(\"r\", d => rScale(parseFloat(d[size])))\n    .attr(\"r\", \"1px\")\n    .attr(\"fill\", \"black\")\n}\n\n\n  useEffect(() => {\n    if(isUpdate == false)\n      drawSplot();\n    else\n      updateSplot();\n\t}, [data]);\n\n  // useEffect(() => {\n  //   updateSplot();\n\t// }, [isUpdate]);\n\n    \n  return (\n\t\t<div>\n\t\t\t<svg ref={splotSvg} width={svgWidth} height={svgHeight}> \n\t\t\t</svg>\n    </div>\n  )\n\n}\nexport default Mainplot;"]},"metadata":{},"sourceType":"module"}